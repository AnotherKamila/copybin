# an example config file for copybin
# uses bash syntax, so do whatever bash allows

# Destination
# [required unless provided on the commandline]
#
# where to upload, both server name and path -- will be passed to scp
#SERVER="user@example.com:~/public_html/copybin/"
#SERVER="myhost:~/www/" # named hosts can be used too
#SERVER="./generated" # or local folders
SERVER="localhost:~/public_html/copybin" # or if you have sshd running...

# Password-protection settings
# [required if passwords will be used]
#
# .htaccess template to be used when no .htaccess file is found in the remote
# folder
HTACCESS_TMPL_FILENAME="`dirname $CONFIG_FILE`/copybin-htaccess.template"
#
# location of the used .htpasswd file (should be outside of the document root;
# must be absolute for now)
# note: it is not possible to set passwords if $SERVER is just a local
# directory, because we can't ssh to a local directory obviously
HTPASSWD="$HOME/.htstuff/htpass-copybin"

# HTML creation settings
# [required]
# 
# syntax highlighting program (needs to produce something that looks like HTML
# on stdout)
#HL_PROG="echo '<pre>'; cat; echo '</pre>'" # use this for no highlighting
# the following uses the file extension to choose the lexer, but fails if it is
# unknown
HL_PROG="pygmentize -f html"
# the following attempts to guess the lexer based on file contents, but it is
# not very reliable
#HL_PROG="pygmentize -g -f html"
# TODO fix this
#
# template location
# note: in the template, `!NAME' will be replaced with filename and
# `!CONTENT' with file contents; otherwise just normal HTML with whatever you
# want
# (note: !CONTENT must be on a line by itself with no whitespace because I am
# using awk to avoid problems in case of large files)
TMPL="./.assets/template.html"

# Hooks
#
# these functions have access to all variables defined here, and in case of
# {before,after}file will be given the current filename as a parameter
#beforefile() {}
#afterfile() {}
#beforeall() {}
afterall() {
	rsync -trz ./.assets $SERVER # a good idea
}
